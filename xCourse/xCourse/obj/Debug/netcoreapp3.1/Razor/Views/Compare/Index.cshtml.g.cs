#pragma checksum "C:\Users\holde\Documents\GitHub\3380-xCourse\xCourse\xCourse\Views\Compare\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "df88c7888a8f66d8f1a60523552a564f9925f073"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Compare_Index), @"mvc.1.0.view", @"/Views/Compare/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\holde\Documents\GitHub\3380-xCourse\xCourse\xCourse\Views\_ViewImports.cshtml"
using xCourse;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\holde\Documents\GitHub\3380-xCourse\xCourse\xCourse\Views\_ViewImports.cshtml"
using xCourse.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"df88c7888a8f66d8f1a60523552a564f9925f073", @"/Views/Compare/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"32047ea07d82399d02693617dce5cf011a38a2d1", @"/Views/_ViewImports.cshtml")]
    public class Views_Compare_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<CompareModel>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("onload", new global::Microsoft.AspNetCore.Html.HtmlString("init()"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.LabelTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"
<div class=""card card-primary"">
    <div class=""card-header"">
        <h2 style=""padding-left:3px;""><span class=""tab1""></span>Select the degree you want to compare to.</h2>
    </div>
    <div class=""card-body"">
        <div style=""padding: 10px"">
");
#nullable restore
#line 9 "C:\Users\holde\Documents\GitHub\3380-xCourse\xCourse\xCourse\Views\Compare\Index.cshtml"
             using (Html.BeginForm("Index", "Compare", FormMethod.Post))
            {

#line default
#line hidden
#nullable disable
            WriteLiteral("            <div class=\"form\">\r\n                <div class=\"form-group\">\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("label", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "df88c7888a8f66d8f1a60523552a564f9925f0734236", async() => {
                WriteLiteral("Degree Name:");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.LabelTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper);
#nullable restore
#line 13 "C:\Users\holde\Documents\GitHub\3380-xCourse\xCourse\xCourse\Views\Compare\Index.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model.DegreeName);

#line default
#line hidden
#nullable disable
            __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                </div>\r\n                ");
#nullable restore
#line 15 "C:\Users\holde\Documents\GitHub\3380-xCourse\xCourse\xCourse\Views\Compare\Index.cshtml"
           Write(Html.DropDownListFor(m => m.CompareDegree, Model.DegreeName.Select(x => new SelectListItem(x, x)), "Select a Degree", new { @class = "selector form-control" }));

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n                <br />\r\n                <input type=\"submit\" value=\"Submit\" />\r\n            </div>\r\n");
#nullable restore
#line 19 "C:\Users\holde\Documents\GitHub\3380-xCourse\xCourse\xCourse\Views\Compare\Index.cshtml"
            }

#line default
#line hidden
#nullable disable
            WriteLiteral(@"        </div>
    </div>
</div>

<script type=""text/javascript"" src=""https://cdn.jsdelivr.net/npm/gojs/release/go.js""></script>

<script>

// this controls whether the layout is horizontal and the layer bands are vertical, or vice-versa:
var HORIZONTAL = true;  // this constant parameter can only be set here, not dynamically

// Perform a LayeredDigraphLayout where commitLayers is overridden to modify the background Part whose key is ""_BANDS"".
function BandedLDLayout() {
    go.LayeredDigraphLayout.call(this);
}
go.Diagram.inherit(BandedLDLayout, go.LayeredDigraphLayout);


BandedLDLayout.prototype.assignLayers = function () {
    go.LayeredDigraphLayout.prototype.assignLayers.call(this);
    var maxlayer = 7;
    // now assign specific layers
    var it = this.network.vertexes.iterator;
    while (it.next()) {
        var v = it.value;
        if (v.node !== null) {
            var lay = v.node.data.layer;
            if (typeof lay === ""number"" && lay >= 0 && lay <= maxlayer) {
");
            WriteLiteral(@"                v.layer = lay;
            }
        }
    }
};


BandedLDLayout.prototype.commitLayers = function (layerRects, offset) {
    // update the background object holding the visual ""bands""
    var bands = this.diagram.findPartForKey(""_BANDS"");
    if (bands) {
        var model = this.diagram.model;
        bands.location = this.arrangementOrigin.copy().add(offset);

        // make each band visible or not, depending on whether there is a layer for it
        for (var it = bands.elements; it.next();) {
            var idx = it.key;
            var elt = it.value;  // the item panel representing a band
            elt.visible = idx < layerRects.length;
        }

        // set the bounds of each band via data binding of the ""bounds"" property
        var arr = bands.data.itemArray;
        for (var i = 0; i < layerRects.length; i++) {
            var itemdata = arr[i];
            if (itemdata) {
                model.setDataProperty(itemdata, ""bounds"", layerRects[i]);
 ");
            WriteLiteral(@"           }
        }
    }
};
// end BandedLDLayout


function init() {
    var $ = go.GraphObject.make;

    myDiagram = $(go.Diagram, ""myDiagramDiv"",
        {
            //allowDragOut: false,
            initialAutoScale: go.Diagram.Uniform,
            initialContentAlignment: go.Spot.Center,
            layout: $(BandedLDLayout,
                {
                    direction: HORIZONTAL ? 0 : 90
                })  // custom layout is defined above
        });

    myDiagram.nodeTemplate =
        $(go.Node, ""Auto"",
            $(go.Shape, ""RoundedRectangle"",
                { fill: ""white"" }),
            $(go.Panel, ""Vertical"",
                new go.Binding(""itemArray"", ""items""),
                {
                    itemTemplate:
                        $(go.Panel, ""Auto"",
                            { margin: 1 },
                            $(go.TextBlock, new go.Binding(""text"", """"),
                                { margin: 1 })
                        )
    ");
            WriteLiteral(@"            }
            )
        );

    myDiagram.nodeTemplateMap.add(""Bands"",
        $(go.Part, ""Position"",
            new go.Binding(""itemArray""),
            {
                isLayoutPositioned: false,  // but still in document bounds
                locationSpot: new go.Spot(0, 0, HORIZONTAL ? 0 : 16, HORIZONTAL ? 16 : 0),  // account for header height
                layerName: ""Background"",
                pickable: false,
                selectable: false,
                itemTemplate:
                    $(go.Panel, HORIZONTAL ? ""Vertical"" : ""Horizontal"",
                        new go.Binding(""position"", ""bounds"", function (b) { return b.position; }),
                        $(go.TextBlock,
                            {
                                angle: HORIZONTAL ? 0 : 270,
                                textAlign: ""center"",
                                wrap: go.TextBlock.None,
                                font: ""bold 11pt sans-serif"",
                       ");
            WriteLiteral(@"         background: $(go.Brush, ""Linear"", { 0: ""white"", 1: go.Brush.darken(""white"") })
                            },
                            new go.Binding(""text""),
                            // always bind ""width"" because the angle does the rotation
                            new go.Binding(""width"", ""bounds"", function (r) { return HORIZONTAL ? r.width : r.height; })
                        ),
                        $(go.Shape,
                            { stroke: null, strokeWidth: 0 },
                            new go.Binding(""desiredSize"", ""bounds"", function (r) { return r.size; }),
                            new go.Binding(""fill"", ""itemIndex"", function (i) { return i % 2 == 0 ? ""whitesmoke"" : go.Brush.darken(""whitesmoke""); }).ofObject())
                    )
            }
        ));

    myDiagram.linkTemplate =
        $(go.Link,
            $(go.Shape));  // simple black line, no arrowhead needed

    // define the tree node data
    var nodeDataArray = [
        { // ");
            WriteLiteral(@"this is the information needed for the headers of the bands
            key: ""_BANDS"",
            category: ""Bands"",
            itemArray: [
                { text: ""Fall 1"" },
                { text: ""Spring 2"" },
                { text: ""Fall 3"" },
                { text: ""Spring 4"" },
                { text: ""Fall 5"" },
                { text: ""Spring 6"" },
                { text: ""Fall 7"" },
                { text: ""Spring 8"" }
            ]
        },
            ");
#nullable restore
#line 165 "C:\Users\holde\Documents\GitHub\3380-xCourse\xCourse\xCourse\Views\Compare\Index.cshtml"
       Write(Html.Raw(@Model.FirstDegreeNodes));

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n            ];\r\n\r\n\r\n\r\n    var linkDataArray = [ ");
#nullable restore
#line 170 "C:\Users\holde\Documents\GitHub\3380-xCourse\xCourse\xCourse\Views\Compare\Index.cshtml"
                     Write(Html.Raw(@Model.FirstDegreeLinks));

#line default
#line hidden
#nullable disable
            WriteLiteral(@" ];

    myDiagram.model = new go.GraphLinksModel([
        { // this is the information needed for the headers of the bands
            key: ""_BANDS"",
            category: ""Bands"",
            itemArray: [
                { text: ""Fall 1"" },
                { text: ""Spring 2"" },
                { text: ""Fall 3"" },
                { text: ""Spring 4"" },
                { text: ""Fall 5"" },
                { text: ""Spring 6"" },
                { text: ""Fall 7"" },
                { text: ""Spring 8"" }
            ]
        },
            ");
#nullable restore
#line 187 "C:\Users\holde\Documents\GitHub\3380-xCourse\xCourse\xCourse\Views\Compare\Index.cshtml"
       Write(Html.Raw(@Model.FirstDegreeNodes));

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n            ],\r\n    [ ");
#nullable restore
#line 189 "C:\Users\holde\Documents\GitHub\3380-xCourse\xCourse\xCourse\Views\Compare\Index.cshtml"
 Write(Html.Raw(@Model.FirstDegreeLinks));

#line default
#line hidden
#nullable disable
            WriteLiteral(@" ]
            );

    myDiagram2 = $(go.Diagram, ""myDiagramDiv2"",
        {
            //allowDragOut: false,
            initialAutoScale: go.Diagram.Uniform,
            initialContentAlignment: go.Spot.Center,
            layout: $(BandedLDLayout,
                {
                    direction: HORIZONTAL ? 0 : 90
                }),
            ""undoManager.isEnabled"": true
        }
    );
    myDiagram2.nodeTemplate =
        $(go.Node, ""Auto"",
            $(go.Shape, ""RoundedRectangle"",
                { fill: ""white"" }),
            $(go.Panel, ""Vertical"",
                new go.Binding(""itemArray"", ""items""),
                {
                    itemTemplate:
                        $(go.Panel, ""Auto"",
                            { margin: 1 },
                            $(go.TextBlock, new go.Binding(""text"", """"),
                                { margin: 1 })

                        )

                }

            )
        );

    myDiagram2.nodeTemplateMap");
            WriteLiteral(@".add(""Bands"",
        $(go.Part, ""Position"",
            new go.Binding(""itemArray""),
            {
                isLayoutPositioned: false,  // but still in document bounds
                locationSpot: new go.Spot(0, 0, HORIZONTAL ? 0 : 16, HORIZONTAL ? 16 : 0),  // account for header height
                layerName: ""Background"",
                pickable: false,
                selectable: false,
                itemTemplate:
                    $(go.Panel, HORIZONTAL ? ""Vertical"" : ""Horizontal"",
                        new go.Binding(""position"", ""bounds"", function (b) { return b.position; }),
                        $(go.TextBlock,
                            {
                                angle: HORIZONTAL ? 0 : 270,
                                textAlign: ""center"",
                                wrap: go.TextBlock.None,
                                font: ""bold 11pt sans-serif"",
                                background: $(go.Brush, ""Linear"", { 0: ""white"", 1: go.Brush.dark");
            WriteLiteral(@"en(""white"") })
                            },
                            new go.Binding(""text""),
                            // always bind ""width"" because the angle does the rotation
                            new go.Binding(""width"", ""bounds"", function (r) { return HORIZONTAL ? r.width : r.height; })
                        ),
                        $(go.Shape,
                            { stroke: null, strokeWidth: 0 },
                            new go.Binding(""desiredSize"", ""bounds"", function (r) { return r.size; }),
                            new go.Binding(""fill"", ""itemIndex"", function (i) { return i % 2 == 0 ? ""whitesmoke"" : go.Brush.darken(""whitesmoke""); }).ofObject())
                    )
            }
        ));
    myDiagram2.linkTemplate =
        $(go.Link,
            $(go.Shape));

    var nodeDataArray2 = [
        {
            key: ""_BANDS"",
            category: ""Bands"",
            itemArray: [
                { text: ""Fall 1"" },
                { text: ""Spri");
            WriteLiteral(@"ng 2"" },
                { text: ""Fall 3"" },
                { text: ""Spring 4"" },
                { text: ""Fall 5"" },
                { text: ""Spring 6"" },
                { text: ""Fall 7"" },
                { text: ""Spring 8"" }
            ]
        },
                ");
#nullable restore
#line 274 "C:\Users\holde\Documents\GitHub\3380-xCourse\xCourse\xCourse\Views\Compare\Index.cshtml"
           Write(Html.Raw(@Model.SecondDegreeNodes));

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n            ];\r\n\r\n\r\n\r\n    var linkDataArray2 = [ ");
#nullable restore
#line 279 "C:\Users\holde\Documents\GitHub\3380-xCourse\xCourse\xCourse\Views\Compare\Index.cshtml"
                      Write(Html.Raw(@Model.SecondDegreeLinks));

#line default
#line hidden
#nullable disable
            WriteLiteral(@" ];

    myDiagram2.model = new go.GraphLinksModel([{
        key: ""_BANDS"",
        category: ""Bands"",
        itemArray: [
            { text: ""Fall 1"" },
            { text: ""Spring 2"" },
            { text: ""Fall 3"" },
            { text: ""Spring 4"" },
            { text: ""Fall 5"" },
            { text: ""Spring 6"" },
            { text: ""Fall 7"" },
            { text: ""Spring 8"" }
        ]
    },
            ");
#nullable restore
#line 295 "C:\Users\holde\Documents\GitHub\3380-xCourse\xCourse\xCourse\Views\Compare\Index.cshtml"
       Write(Html.Raw(@Model.SecondDegreeNodes));

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n        ],\r\n    [ ");
#nullable restore
#line 297 "C:\Users\holde\Documents\GitHub\3380-xCourse\xCourse\xCourse\Views\Compare\Index.cshtml"
 Write(Html.Raw(@Model.SecondDegreeLinks));

#line default
#line hidden
#nullable disable
            WriteLiteral(" ]\r\n\r\n        );\r\n    };\r\n</script>\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "df88c7888a8f66d8f1a60523552a564f9925f07319179", async() => {
                WriteLiteral(@"
    <div class=""row"">
        <div class=""col-6"">
            <div id=""myDiagramDiv"" style=""width: 100%; height: 1000px; border: 1px solid black; margin: 0 2px 0 0""></div>
        </div>
        <div class=""col-6"">
            <div id=""myDiagramDiv2"" style=""width: 100%; height: 1000px; border: 1px solid black; margin: 0 2px 0 0""></div>
        </div>
    </div>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<CompareModel> Html { get; private set; }
    }
}
#pragma warning restore 1591
