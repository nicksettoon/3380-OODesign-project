#pragma checksum "C:\Users\holde\Documents\GitHub\3380-xCourse\xCourse\xCourse\Views\Test\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "228be908971c584592d4bffc476a7f4b341bba4b"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Test_Index), @"mvc.1.0.view", @"/Views/Test/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\holde\Documents\GitHub\3380-xCourse\xCourse\xCourse\Views\_ViewImports.cshtml"
using xCourse;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\holde\Documents\GitHub\3380-xCourse\xCourse\xCourse\Views\_ViewImports.cshtml"
using xCourse.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"228be908971c584592d4bffc476a7f4b341bba4b", @"/Views/Test/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"e372bd050dbacbc928d4f4a0d9d293fdffe1e74e", @"/Views/_ViewImports.cshtml")]
    public class Views_Test_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("onload", new global::Microsoft.AspNetCore.Html.HtmlString("init()"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "228be908971c584592d4bffc476a7f4b341bba4b3536", async() => {
                WriteLiteral(@"
<script type=""text/javascript"" src=""https://cdn.jsdelivr.net/npm/gojs/release/go.js""></script>

<script>

  // this controls whether the layout is horizontal and the layer bands are vertical, or vice-versa:
  var HORIZONTAL = true;  // this constant parameter can only be set here, not dynamically

    // Perform a LayeredDigraphLayout where commitLayers is overridden to modify the background Part whose key is ""_BANDS"".
    function BandedLDLayout() {
    go.LayeredDigraphLayout.call(this);
    }
    go.Diagram.inherit(BandedLDLayout, go.LayeredDigraphLayout);

    
    BandedLDLayout.prototype.assignLayers = function() {
    go.LayeredDigraphLayout.prototype.assignLayers.call(this);
    var maxlayer = 7;
    // now assign specific layers
    var it = this.network.vertexes.iterator;
    while (it.next()) {
    var v = it.value;
    if (v.node !== null) {
        var lay = v.node.data.layer;
        if (typeof lay === ""number"" && lay >= 0 && lay <= maxlayer) {
        v.layer = lay;
 ");
                WriteLiteral(@"       }
    }
    }
    };


    BandedLDLayout.prototype.commitLayers = function(layerRects, offset) {
    // update the background object holding the visual ""bands""
    var bands = this.diagram.findPartForKey(""_BANDS"");
    if (bands) {
    var model = this.diagram.model;
    bands.location = this.arrangementOrigin.copy().add(offset);

    // make each band visible or not, depending on whether there is a layer for it
    for (var it = bands.elements; it.next(); ) {
        var idx = it.key;
        var elt = it.value;  // the item panel representing a band
        elt.visible = idx < layerRects.length;
    }

    // set the bounds of each band via data binding of the ""bounds"" property
    var arr = bands.data.itemArray;
    for (var i = 0; i < layerRects.length; i++) {
        var itemdata = arr[i];
        if (itemdata) {
        model.setDataProperty(itemdata, ""bounds"", layerRects[i]);
        }
    }
    }
    };
    // end BandedLDLayout


    function init() {
    if ");
                WriteLiteral(@"(window.goSamples) goSamples();  // init for these samples -- you don't need to call this
    var $ = go.GraphObject.make;

    myDiagram = $(go.Diagram, ""myDiagramDiv"",
                {
                    initialAutoScale: go.Diagram.Uniform,
                    initialContentAlignment: go.Spot.Center,
                    layout: $(BandedLDLayout,
                            {
                                direction: HORIZONTAL ? 0 : 90
                            }),  // custom layout is defined above
                    ""undoManager.isEnabled"": true
                });

    myDiagram.nodeTemplate =
    $(go.Node, ""Auto"",
        $(go.Shape, ""RoundedRectangle"",
        { fill: ""white"" }),
        $(go.Panel, ""Vertical"",
        new go.Binding(""itemArray"", ""items""),
        {
            itemTemplate:
            $(go.Panel, ""Auto"",
                { margin: 1 },
            $(go.TextBlock, new go.Binding(""text"", """"),
                { margin: 1 })

            )

        }
");
                WriteLiteral(@"
        )
    );

    // There should be at most a single object of this category.
    // This Part will be modified by BandedLDLayout.commitLayers to display visual ""bands""
    // where each ""layer"" is a layer of the tree.
    // This template is parameterized at load time by the HORIZONTAL parameter.
    // You also have the option of showing rectangles for the layer bands or
    // of showing separator lines between the layers, but not both at the same time,
    // by commenting in/out the indicated code.
    myDiagram.nodeTemplateMap.add(""Bands"",
    $(go.Part, ""Position"",
        new go.Binding(""itemArray""),
        {
        isLayoutPositioned: false,  // but still in document bounds
        locationSpot: new go.Spot(0, 0, HORIZONTAL ? 0 : 16, HORIZONTAL ? 16 : 0),  // account for header height
        layerName: ""Background"",
        pickable: false,
        selectable: false,
        itemTemplate:
            $(go.Panel, HORIZONTAL ? ""Vertical"" : ""Horizontal"",
            new go");
                WriteLiteral(@".Binding(""position"", ""bounds"", function(b) { return b.position; }),
            $(go.TextBlock,
                {
                angle: HORIZONTAL ? 0 : 270,
                textAlign: ""center"",
                wrap: go.TextBlock.None,
                font: ""bold 11pt sans-serif"",
                background: $(go.Brush, ""Linear"", { 0: ""white"", 1: go.Brush.darken(""white"") })
                },
                new go.Binding(""text""),
                // always bind ""width"" because the angle does the rotation
                new go.Binding(""width"", ""bounds"", function(r) { return HORIZONTAL ? r.width : r.height; })
            ),
            // option 1: rectangular bands:
            $(go.Shape,
                { stroke: null, strokeWidth: 0 },
                new go.Binding(""desiredSize"", ""bounds"", function(r) { return r.size; }),
                new go.Binding(""fill"", ""itemIndex"", function(i) { return i % 2 == 0 ? ""whitesmoke"" : go.Brush.darken(""whitesmoke""); }).ofObject())
            // opt");
                WriteLiteral(@"ion 2: separator lines:
            //(HORIZONTAL
            //  ? $(go.Shape, ""LineV"",
            //      { stroke: ""gray"", alignment: go.Spot.TopLeft, width: 1 },
            //      new go.Binding(""height"", ""bounds"", function(r) { return r.height; }),
            //      new go.Binding(""visible"", ""itemIndex"", function(i) { return i > 0; }).ofObject())
            //  : $(go.Shape, ""LineH"",
            //      { stroke: ""gray"", alignment: go.Spot.TopLeft, height: 1 },
            //      new go.Binding(""width"", ""bounds"", function(r) { return r.width; }),
            //      new go.Binding(""visible"", ""itemIndex"", function(i) { return i > 0; }).ofObject())
            //)
            )
        }
    ));

    myDiagram.linkTemplate =
    $(go.Link,
        $(go.Shape));  // simple black line, no arrowhead needed

    // define the tree node data
    const nodeDataArray = [
    { // this is the information needed for the headers of the bands
        key: ""_BANDS"",
        category: ""Ban");
                WriteLiteral(@"ds"",
        itemArray: [
        { text: ""Fall 1"" },
        { text: ""Spring 2"" },
        { text: ""Fall 3"" },
        { text: ""Spring 4"" },
        { text: ""Fall 5"" },
        { text: ""Spring 6"" },
        { text: ""Fall 7"" },
        { text: ""Spring 8"" }
        ]
    },
    {key: ""CSC 1350"", items: [""(4)"", ""CSC 1350"", ""Intro CS I for Majors""], layer: 7 },
    {key: ""MATH 1550"", items: [""(5)"", ""MATH 1550"", ""Calc I""], layer: 7 },
    {key: ""ENGL 1001"", items: [""(3)"", ""ENGL 1001"", ""Comp I""], layer:  7},
    {key: ""BIOL"", items: [""(3)"", ""BIOL"", ""Sequence I""], layer:  7},

    {key: ""CSC 1351"", items: [""(4)"", ""CSC 1351"", ""Intro CS II for Majors""], layer: 6 },
    {key: ""MATH 1552"", items: [""(4)"", ""MATH 1552"", ""Calc II""], layer:  6},
    {key: ""ENGL OR HNRS"", items: [""(3)"", ""Gen Ed Hum"", ""ENGL or HNRS 2000+""], layer:  6},
    {key: ""Physical Sci."", items: [""(3)"", ""Physical Sci."", ""(restricted list)""], layer:  6},
    {key: ""Science Seq Lab I"", items: [""(1)"", ""Science Sequence"", ""I or II Lab""");
                WriteLiteral(@"], layer:  6},

    {key: ""CSC 3102"", items: [""(3)"", ""CSC 3102"", ""Adv Data Str""], layer: 5 },
    {key: ""CSC 2259"", items: [""(3)"", ""CSC 2259"", ""Discrete Structures""], layer: 5 },
    {key: ""MATH 2090"", items: [""(4)"", ""MATH 2090"", ""DE & Lin Alg""], layer:  5},
    {key: ""GEN ED"", items: [""(3)"", ""Gen Ed"", ""Humanity""], layer:  5},
    {key: ""Physical Sci. II"", items: [""(3)"", ""Science Sequence II"", ""Requirement""], layer:  5},
    {key: ""Science Seq Lab II"", items: [""(1)"", ""Science Sequence"", ""Lab I or II Lab""], layer:  5},

    {key: ""CSC 3380"", items: [""(3)"", ""CSC 3380"", ""OO Design""], layer: 4 },
    {key: ""CSC 3501"", items: [""(3)"", ""CSC 3501"", ""Comp Org & Design""], layer: 4 },
    {key: ""CSC 2262"", items: [""(3)"", ""CSC 2262"", ""Num Methods""], layer: 4 },
    {key: ""ENGL 2000"", items: [""(3)"", ""ENGL 2000"", """"], layer:  4},
    {key: ""CMST"", items: [""(3)"", ""Gen Ed Hum"", ""CMST""], layer:  4},

    {key: ""CSC 4330"", items: [""(3)"", ""CSC 4330"", ""Software Sys""], layer: 3 },
    {key: ""CSC 2+++"", items: [""(3");
                WriteLiteral(@")"", ""CSC 2+++"", """"], layer:  3},
    {key: ""IE 3302"", items: [""(3)"", ""IE 3302"", ""Statistics""], layer:  3},
    {key: ""Area Elective"", items: [""**(3)"", ""Area Elective"", ""(2nd Discipline)""], layer:  3},
    {key: ""Tech Ele A"", items: [""*(3)"", ""Tech Elective"", ""A""], layer:  3},

    {key: ""CSC 4103"", items: [""(3)"", ""CSC 4103"", ""Op Sys""], layer: 2 },
    {key: ""CSC 4+++"", items: [""(3)"", ""CSC 4+++"", """"], layer:  2},
    {key: ""Area Elective"", items: [""**(3)"", ""Area Elective"", ""(2nd Discipline)""], layer:  2},
    {key: ""Tech Ele A or B"", items: [""*(3)"", ""Tech Elective"", ""A or B""], layer:  2},
    {key: ""GEN ED SOCL SCI"", items: [""(3)"", ""Gen Ed"", ""Socl Science""], layer:  2},


    {key: ""CSC 4101"", items: [""(3)"", ""CSC 4101"", ""Prog Lang""], layer: 1 },
    {key: ""CSC 3200"", items: [""(3)"", ""CSC 3200"", ""Ethics in Computing""], layer: 1 },
    {key: ""CSC 4+++"", items: [""(3)"", ""CSC 4+++"", """"], layer: 1 },
    {key: ""Area Elective"", items: [""**(3)"", ""Area Elective"", ""(2nd Discipline)""], layer:  1},
    {key:");
                WriteLiteral(@" ""Area Elective"", items: [""**(3)"", ""Area Elective"", ""(2nd Discipline)""], layer:  1},

    {key: ""CSC 3+++"", items: [""(3)"", ""CSC 3+++"", """"], layer: 0 },
    {key: ""CSC 4+++"", items: [""(3)"", ""CSC 4+++"", """"], layer: 0 },
    {key: ""Area Elective"", items: [""**(3)"", ""Area Elective"", ""(2nd Discipline)""], layer:  0},
    {key: ""GEN ED ART"", items: [""(3)"", ""Gen Ed"", ""Art""], layer:  0},
    {key: ""GEN ED SOCL SCI"", items: [""(3)"", ""Gen Ed"", ""Socl Science 2+++""], layer:  0}
    ];

    var linkDataArray = [
    {to: ""CSC 1351"", from: ""CSC 1350""},
    {to: ""MATH 1552"", from: ""MATH 1550""},
    {to: ""MATH 2090"", from: ""MATH 1552""},
    // {to: ""CSC 1351"", from: ""MATH 1550"", color: red},
    {to: ""CSC 2262"", from: ""MATH 1552""},
    {to: ""IE 3302"", from: ""MATH 1552""},
    {to: ""IE 3302"", from: ""CSC 2259""},
    //{to: ""Physical Sci."", from: ""Science Seq Lab I"", color: red},
    // {to: ""Physical Sci. II"", from: ""Science Seq Lab II"", color: red},
    {to: ""Science Seq Lab II"", from: ""Science Seq Lab I""},
  ");
                WriteLiteral(@"  {to: ""CSC 3200"", from: ""ENGL 2000""},
    {to: ""CSC 3102"", from: ""CSC 1351""},
    {to: ""CSC 4101"", from: ""CSC 3102""},
    {to: ""CSC 4103"", from: ""CSC 3102""},
    {to: ""CSC 3200"", from: ""CSC 3102""},
    {to: ""CSC 3380"", from: ""CSC 1351""},
    {to: ""CSC 4330"", from: ""CSC 3102""},
    {to: ""CSC 4330"", from: ""CSC 3380""},
    {to: ""CSC 2259"", from: ""CSC 1351""},
    {to: ""CSC 3501"", from: ""CSC 2259""},
    {to: ""CSC 2262"", from: ""CSC 1351""}
    ];

    myDiagram.model = new go.GraphLinksModel(nodeDataArray, linkDataArray);
    }
</script>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "228be908971c584592d4bffc476a7f4b341bba4b16193", async() => {
                WriteLiteral("\r\n    <div id=\"myDiagramDiv\" style=\"width: 1200px; height: 800px; border: 1px solid black;\"></div>\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
